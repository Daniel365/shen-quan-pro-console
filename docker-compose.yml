version: '3.8'

services:
  # 前端服务
  frontend:
    image: vue-frontend:latest
    container_name: vue-frontend
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    image: node-backend:latest
    container_name: node-backend
    ports:
      - "${PORT}:${PORT}"  # 使用.env中的PORT变量
    restart: unless-stopped
    environment:
      - DB_HOST=mysql  # Docker内部通过服务名访问
      - DB_PORT=${DB_PORT}  # 从.env读取
      - NODE_ENV=${NODE_ENV}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BASE_URL=${BASE_URL}
      - PORT=${PORT}
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: app-mysql
    ports:
      - "${DB_PORT}:${DB_PORT}"  # 使用.env中的数据库端口
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}  # 与.env中的密码保持一致
      - MYSQL_DATABASE=${DB_NAME}  # 从.env读取数据库名
      - MYSQL_USER=${DB_USER}  # 从.env读取用户名
      - MYSQL_PASSWORD=${DB_PASSWORD}  # 从.env读取密码
      - TZ=Asia/Shanghai
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d  # 初始化脚本目录(可选)
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:  # 持久化MySQL数据
